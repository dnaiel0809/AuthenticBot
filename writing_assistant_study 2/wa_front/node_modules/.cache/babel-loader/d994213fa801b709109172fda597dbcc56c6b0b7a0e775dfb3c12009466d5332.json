{"ast":null,"code":"import axios from 'axios';\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\nconst service = axios.create({\n  // baseURL: 'http://localhost:50000/', // 你的服务器的 url，如果服务器运行在其他端口，请修改这个部分\n  baseURL: 'http://34.226.214.165:8000/',\n  // 你的服务器的 url，如果服务器运行在其他端口，请修改这个部分\n  // baseURL: 'https://authentic-web-backend-3f378cc1ac7f.herokuapp.com/',\n  timeout: 100000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => response, error => {\n  console.log('err' + error); // 打印出错误信息\n  return Promise.reject(error);\n});\nexport default service;\n// long-polling\n\n// function getData() {\n//     return service.get('/?min=0&max=100');\n// }\n\n// // create a promise that resolves after a short delay\n// function delayPromise(ms) {\n//     return new Promise(function (resolve) {\n//         setTimeout(resolve, ms);\n//     });\n// }\n\n// // cb is the callback function\n// // interval is how often to poll\n// // timeout is how long to poll waiting for a result (0 means try forever)\n// function poll(cb, predicate, errorHandler, interval, timeout) {\n//     let start = Date.now();\n\n//     function run() {\n//         return cb().then(function ({ data }) {\n//             console.log('data:', data);\n//             if (predicate(data)) {\n//                 // we know we're done here, return from here whatever you\n//                 // want the final resolved value of the promise to be\n//                 return data;\n//             } else {\n//                 if (timeout !== 0 && Date.now() - start > timeout) {\n//                     errorHandler();\n//                 } else {\n//                     // run again with a short delay\n//                     return delayPromise(interval).then(run);\n//                 }\n//             }\n//         });\n//     }\n//     return run();\n// }\n\n// function isGreaterThan90([number]) {\n//     return number.random > 90;\n// }\n\n// function errorHandler() {\n//     throw new Error('timeout error on poll');\n// }\n\n// function logResult(data) {\n//     data = JSON.stringify(data, null, 2);\n//     console.log(`result: ${data}`);\n// }\n\n// poll(getData, isGreaterThan90, errorHandler, 1000, 30 * 1000)\n//     .then(logResult)\n//     .catch(console.error);\n\n// long-polling","map":{"version":3,"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","service","create","baseURL","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response"],"sources":["/Users/lee/Downloads/writing_assistant/wa_front/src/http.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\n\n\nconst service = axios.create({\n    // baseURL: 'http://localhost:50000/', // 你的服务器的 url，如果服务器运行在其他端口，请修改这个部分\n    baseURL: 'http://34.226.214.165:8000/', // 你的服务器的 url，如果服务器运行在其他端口，请修改这个部分\n    // baseURL: 'https://authentic-web-backend-3f378cc1ac7f.herokuapp.com/',\n    timeout: 100000, // 请求超时时间\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n    config => {\n        // 在发送请求之前做些什么\n        return config\n    },\n    error => {\n        // 对请求错误做些什么\n        console.log(error)\n        return Promise.reject(error)\n    }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n    response => response,\n    error => {\n        console.log('err' + error) // 打印出错误信息\n        return Promise.reject(error)\n    }\n)\n\nexport default service\n// long-polling\n\n// function getData() {\n//     return service.get('/?min=0&max=100');\n// }\n\n// // create a promise that resolves after a short delay\n// function delayPromise(ms) {\n//     return new Promise(function (resolve) {\n//         setTimeout(resolve, ms);\n//     });\n// }\n\n// // cb is the callback function\n// // interval is how often to poll\n// // timeout is how long to poll waiting for a result (0 means try forever)\n// function poll(cb, predicate, errorHandler, interval, timeout) {\n//     let start = Date.now();\n\n//     function run() {\n//         return cb().then(function ({ data }) {\n//             console.log('data:', data);\n//             if (predicate(data)) {\n//                 // we know we're done here, return from here whatever you\n//                 // want the final resolved value of the promise to be\n//                 return data;\n//             } else {\n//                 if (timeout !== 0 && Date.now() - start > timeout) {\n//                     errorHandler();\n//                 } else {\n//                     // run again with a short delay\n//                     return delayPromise(interval).then(run);\n//                 }\n//             }\n//         });\n//     }\n//     return run();\n// }\n\n// function isGreaterThan90([number]) {\n//     return number.random > 90;\n// }\n\n// function errorHandler() {\n//     throw new Error('timeout error on poll');\n// }\n\n// function logResult(data) {\n//     data = JSON.stringify(data, null, 2);\n//     console.log(`result: ${data}`);\n// }\n\n// poll(getData, isGreaterThan90, errorHandler, 1000, 30 * 1000)\n//     .then(logResult)\n//     .catch(console.error);\n\n// long-polling\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,cAAc,GAAG,WAAW;AAC3CF,KAAK,CAACC,QAAQ,CAACE,cAAc,GAAG,aAAa;AAI7C,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACzB;EACAC,OAAO,EAAE,6BAA6B;EAAE;EACxC;EACAC,OAAO,EAAE,MAAM,CAAE;AACrB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACN;EACA,OAAOA,MAAM;AACjB,CAAC,EACDC,KAAK,IAAI;EACL;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAR,OAAO,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC7BO,QAAQ,IAAIA,QAAQ,EACpBL,KAAK,IAAI;EACLC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC,EAAC;EAC3B,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeR,OAAO;AACtB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}