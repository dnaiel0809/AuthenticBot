{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint-disable */\nimport http from \"@/http\";\nimport VueMarkdown from \"vue-markdown\";\nimport EasyMDE from \"easymde\";\nimport \"easymde/dist/easymde.min.css\";\nexport default {\n  name: \"WritingAssitant\",\n  components: {\n    VueMarkdown,\n    EasyMDE\n  },\n  mounted() {\n    fetch('/prompt.json').then(response => response.json()).then(data => {\n      this.prompts = data.prompts;\n    }).catch(error => {\n      console.log(error);\n    });\n    this.enableEditMode();\n    this.enableOutputEditMode();\n\n    //  检查是否是登录用户\n  },\n\n  data() {\n    return {\n      testData: '',\n      edit: false,\n      p_edit: false,\n      markdownContent: '',\n      prompts: null,\n      my_prompts: null,\n      drawer: false,\n      my_drawer: false,\n      direction: 'rtl',\n      selectContent: '',\n      beforeEdit: '',\n      inputText: '',\n      outputText: '',\n      // models:['gpt-3.5-turbo', 'gpt-3.5-turbo-16k', 'gpt-4'],\n      models: ['gpt-3.5-turbo', 'gpt-3.5-turbo-16k'],\n      selectedItem: 'gpt-3.5-turbo',\n      editMode: true,\n      m_outputText: \"\",\n      markdownEditor: null,\n      markdownOutputEditor: null,\n      loading: false\n    };\n  },\n  methods: {\n    jumpyTo(url) {\n      if (this.$router.currentRoute.path !== url) {\n        this.$router.push(url);\n      }\n    },\n    messagePop(type, message) {\n      this.$message({\n        message: `${message}`,\n        type: `${type}`\n      });\n    },\n    enableEditMode() {\n      // this.editMode = true;\n      const vm = this;\n      this.$nextTick(() => {\n        if (!this.markdownEditor) {\n          this.markdownEditor = new EasyMDE({\n            element: this.$refs.markdownEditor\n          });\n\n          //设计样式\n          // const codemirrorScroll = document.getElementsByClassName('CodeMirror-scroll')[0];\n          const codemirrorScroll = document.getElementsByClassName('CodeMirror-scroll')[0];\n          console.log(\"scoll\");\n          console.log(codemirrorScroll);\n          if (codemirrorScroll) {\n            codemirrorScroll.style.maxHeight = '400px';\n            codemirrorScroll.style.overflowY = 'auto';\n            console.log(\"successfully set\");\n          }\n          this.markdownEditor.codemirror.on(\"change\", () => {\n            vm.inputText = vm.markdownEditor.value();\n            console.log(vm.inputText); // 输出当前的输入值\n          });\n        }\n      });\n    },\n\n    enableOutputEditMode() {\n      const vm = this;\n      this.$nextTick(() => {\n        if (!this.markdown) {\n          // this.markdownOutputEditor = new EasyMDE({\n          //   element: this.$refs.markdownEditorOutput,\n          // });\n\n          //设计样式\n          const codemirrorScroll = document.getElementsByClassName('CodeMirror-scroll')[1];\n          if (codemirrorScroll) {\n            codemirrorScroll.style.maxHeight = '400px';\n            codemirrorScroll.style.overflowY = 'auto';\n            console.log(\"successfully set\");\n          }\n          this.markdownOutputEditor.codemirror.on(\"change\", () => {\n            // vm.outputText = vm.markdownOutputEditor.value();\n            //每次 vue-diff 的值也会跟着变\n            this.$set(this, 'outputText', this.markdownOutputEditor.value());\n            console.log(vm.outputText); // 输出当前的输入值\n          });\n        }\n      });\n    },\n\n    copyText() {\n      this.$set(this, 'inputText', this.outputText);\n      // this.inputText = this.outputText\n      // document.getElementById('inputArea').textContent = this.outputText\n      this.markdownEditor.value(this.outputText);\n    },\n    async confirmDelete(content) {\n      await http.post('/delete_prompt/', {\n        content: content,\n        person: sessionStorage.getItem('username')\n      }).then(res => {\n        console.log(\"delete successfully\");\n        this.my_prompts = res.data.prompts;\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    async savePromptChange() {\n      console.log(\"触发\");\n      this.selectContent = document.getElementById('editPromptBox').textContent;\n      document.getElementById('editPromptBox').contentEditable = false;\n      this.p_edit = false;\n      //  加入到 drawer 自己修改的 prompt 中\n      await this.saveMyPrompt();\n    },\n    startEdit() {\n      this.edit = true;\n      this.$nextTick(() => {\n        let output = document.getElementById('outputArea');\n        output.textContent = this.outputText;\n      });\n    },\n    saveChange() {\n      this.outputText = document.getElementById('outputArea').textContent;\n      // document.getElementById('outputArea').blur();\n      document.getElementById('outputArea').contentEditable = false;\n      this.edit = false;\n      this.$message({\n        message: 'successfully save changes',\n        type: 'success'\n      });\n    },\n    selectItem(content) {\n      this.selectedItem = content;\n    },\n    selectContent_(content) {\n      this.selectContent = content;\n      this.beforeEdit = content;\n      this.drawer = false;\n    },\n    editCurPrompt() {\n      this.p_edit = true;\n      this.$nextTick(() => {\n        let output = document.getElementById('editPromptBox');\n        output.textContent = this.selectContent;\n      });\n    },\n    cancelPromptChange() {\n      // this.p_edit = false\n      // document.getElementById('editPromptBox').contentEditable = false\n      this.$nextTick(() => {\n        let output = document.getElementById('editPromptBox');\n        this.p_edit = false;\n        document.getElementById('editPromptBox').contentEditable = false;\n        output.textContent = this.beforeEdit;\n      });\n    },\n    mySelectContent_(content) {\n      this.selectContent = content;\n      console.log(this.selectContent);\n      this.beforeEdit = content;\n      this.my_drawer = false;\n    },\n    async saveMyPrompt() {\n      http.post('/save_prompt/', {\n        content: this.selectContent,\n        person: sessionStorage.getItem('username')\n      }).then(res => {\n        console.log(\"save prompt res\", res);\n        if (res.data.success) {\n          this.messagePop('success', \"save prompt changes successfully!\");\n          console.log(\"save successfully\");\n        } else {\n          this.messagePop('error', 'fail to save prompt changes');\n        }\n      }).catch(e => {\n        console.log(e);\n        this.messagePop('error', 'fail to save prompt changes');\n      });\n    },\n    async getMyPrompt() {\n      this.my_drawer = true;\n      http.post('/get_prompt/', {\n        person: sessionStorage.getItem('username')\n      }).then(res => {\n        console.log(\"get successfully\");\n        this.my_prompts = res.data.prompts;\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    getWrtingAssistantHelp() {\n      this.loading = true;\n      let prompt = `[Paragraph]\\n\n                    ${this.inputText}\\n\n                    [TASK]\\n\n                    ${this.selectContent}\\n\n                    [RESULT]\\n\\n`;\n      console.log(\"提交的数据是：\", prompt);\n      http.post('/writing_assistant/', {\n        prompt: prompt,\n        model: this.selectedItem\n      }).then(res => {\n        this.loading = false;\n        this.outputText = res.data.content;\n        this.markdownOutputEditor.value(this.outputText);\n        console.log(\"output Text:\", res.data);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    refreshDrawer() {\n      this.drawer = true;\n    }\n  }\n};","map":{"version":3,"names":["http","VueMarkdown","EasyMDE","name","components","mounted","fetch","then","response","json","data","prompts","catch","error","console","log","enableEditMode","enableOutputEditMode","testData","edit","p_edit","markdownContent","my_prompts","drawer","my_drawer","direction","selectContent","beforeEdit","inputText","outputText","models","selectedItem","editMode","m_outputText","markdownEditor","markdownOutputEditor","loading","methods","jumpyTo","url","$router","currentRoute","path","push","messagePop","type","message","$message","vm","$nextTick","element","$refs","codemirrorScroll","document","getElementsByClassName","style","maxHeight","overflowY","codemirror","on","value","markdown","$set","copyText","confirmDelete","content","post","person","sessionStorage","getItem","res","e","savePromptChange","getElementById","textContent","contentEditable","saveMyPrompt","startEdit","output","saveChange","selectItem","selectContent_","editCurPrompt","cancelPromptChange","mySelectContent_","success","getMyPrompt","getWrtingAssistantHelp","prompt","model","refreshDrawer"],"sources":["src/components/WritingAssitant.vue"],"sourcesContent":["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n<template>\n  <div class=\"container\">\n    <div style=\"display: flex\">\n      <!-- 选择原生的 prompt 部分  -->\n<!--      <el-button @click=\"drawer = true\" type=\"primary\" style=\"margin-top: 4em; margin-left: 5em;\"-->\n<!--                 v-if=\"!selectContent\">-->\n        <el-button @click=\"drawer = true\" type=\"primary\" style=\"margin-top: 4em; margin-left: 5em; margin-right: 1em\">\n<!--        Select Prompts-->\n        System Prompts\n      </el-button>\n\n<!--      <div v-else style=\" display: flex\">-->\n      <div v-if=\"selectContent\" style=\" display: flex\">\n        <!-- 选择完毕之后出现可编辑的框 -->\n        <div v-if=\"!p_edit\" style=\"width: 500px; padding-left: 2em; padding-top: 2em; padding-right: 2em; border: 3px solid lightskyblue\">{{selectContent}}</div>\n        <div v-else id=\"editPromptBox\" v-html=\"selectContent\"\n             style=\"width: 500px; padding-left: 2em; padding-top: 2em; padding-right: 2em\"\n             :contenteditable=\"p_edit\">\n        </div>\n\n          <!--点击 \"编辑\"， 或者 \"确定\"来完成编辑-->\n        <el-button @click=\"editCurPrompt\" type=\"primary\" class=\"button\"\n                   style=\"width: 14%; height: 40px; margin-top: 4em; margin-left: 1em\">edit Prompt</el-button>\n        <el-button @click=\"cancelPromptChange\" type=\"primary\" class=\"button\"\n                   style=\"width: 14%; height: 40px; margin-top: 4em;\"\n                   :disabled=\"!p_edit\">cancel Edit</el-button>\n        <el-button @click=\"savePromptChange\" type=\"primary\" class=\"button\"\n                   style=\"width: 14%; height: 40px; margin-top: 4em; margin-right: 1em\" :disabled=\"!p_edit\">confirm Edit</el-button>\n\n      </div>\n\n      <!-- 获得全部我自己的 prompt 记录-->\n      <el-button type=\"primary\" class=\"button\" @click=\"getMyPrompt\"\n                 style=\"width: 12%; height: 40px; margin-top: 4em; margin-right: 4em\">\n        <i class=\"el-icon-user-solid\"></i>\n        My Prompts</el-button>\n    </div>\n\n\n      <el-button-group class=\"header\">\n        <el-dropdown v-model=\"selectedItem\">\n          <el-button type=\"primary\">\n            {{ selectedItem }}<i class=\"el-icon-arrow-down el-icon--right\"></i>\n          </el-button>\n          <el-dropdown-menu slot=\"dropdown\">\n            <el-dropdown-item v-for=\"(item, index) in models\" :key=\"index\" @click.native=\"selectItem(item)\">\n              {{ item }}\n            </el-dropdown-item>\n          </el-dropdown-menu>\n        </el-dropdown>\n\n        <el-button @click=\"getWrtingAssistantHelp\" type=\"primary\" style=\"margin-left: 16px; margin-right: 50%\">submit</el-button>\n\n<!--        <el-button type=\"primary\"  class=\"button\" @click=\"startEdit\">edit Output</el-button>-->\n<!--        <el-button type=\"primary\"  class=\"button\" @click=\"saveChange\">confirm Edit</el-button>-->\n<!--        <el-button @click=\"copyText\" type=\"primary\">Copy Output</el-button>-->\n        <!--        <el-button type=\"primary\"  class=\"button\" @click=\"refreshDrawer\">重选</el-button>-->\n\n\n        <el-drawer\n              title=\"Select Proper Prompt\"\n              :visible.sync=\"drawer\"\n              :direction=\"direction\"\n              :size=\"'100%'\">\n            <el-menu>\n              <el-menu-item v-for=\"(item, index) in prompts\" :key=\"index\"\n                            @click.native=\"selectContent_(item.content)\" class=\"drop-item\">\n<!--                {{item.content}}-->\n                <el-input\n                    type=\"textarea\"\n                    :autosize=\"{ minRows: 3, maxRows: 4}\"\n                    :placeholder=\"item.content\"\n                    style=\"width: 95%\"\n                >\n                </el-input>\n              </el-menu-item>\n            </el-menu>\n        </el-drawer>\n\n        <el-drawer\n            title=\"Select Your Prompt\"\n            :visible.sync=\"my_drawer\"\n            :direction=\"direction\"\n            :size=\"'90%'\">\n          <el-menu>\n            <el-menu-item v-for=\"(item, index) in my_prompts\" :key=\"index\"\n                          @click.native=\"mySelectContent_(item.content)\" class=\"drop-item\">\n              <el-input\n                  type=\"textarea\"\n                  :autosize=\"{ minRows: 3, maxRows: 4}\"\n                  :placeholder=\"item.content\"\n                   style=\"width: 95%\"\n                  >\n              </el-input>\n              <el-popconfirm\n                  title=\"这是一段内容确定删除吗？\" @confirm=\"confirmDelete(item.content)\">\n                <i slot=\"reference\" class=\"el-icon-close\"\n                   style=\"padding-top: 1em\" @click.stop>\n                </i>\n              </el-popconfirm>\n            </el-menu-item>\n          </el-menu>\n        </el-drawer>\n\n      </el-button-group>\n\n\n    <!-- 核心部件-->\n    <div class=\"translate-container\">\n      <el-row :gutter=20>\n        <!--input 部分-->\n        <el-col :span=\"12\">\n          <div class=\"grid-content bg-light\">\n            <label style=\"font-family: Roboto,RobotoDraft,Helvetica,Arial,sans-serif; font-size: large\">Input</label>\n            <p style=\"font-size: small; color: grey;\">Note: Use gpt-3.5-turbo-16k only when the word count exceeds 5000.</p>\n            <textarea id=\"inputArea\" ref=\"markdownEditor\" class=\"textarea\"></textarea>\n          </div>\n        </el-col>\n\n        <!--output 部分-->\n        <el-col :span=\"12\">\n          <div class=\"grid-content bg-light\" v-loading=\"loading\">\n            <div class=\"label_container\" style=\"display: flex\">\n              <label style=\"font-family: Roboto,RobotoDraft,Helvetica,Arial,sans-serif; font-size: large\">Output</label>\n              <el-button @click=\"copyText\" type=\"primary\" style=\"margin-left: 30%; margin-bottom: 2em\">Copy Output</el-button>\n            </div>\n<!--            <p style=\"font-size: small; color: grey;\"> This is the gpt output</p>-->\n<!--            <div v-if=\"!edit\" class=\"textarea\" style=\"height: 80%\" >-->\n<!--              <VueMarkdown :key=\"outputText\">{{outputText}}</VueMarkdown>-->\n<!--            </div>-->\n\n<!--            <div v-else :contenteditable=edit class=\"textarea\" style=\"height: 80%\" id=\"outputArea\"-->\n<!--                 v-html=\"outputText\" ></div>-->\n\n            <textarea id=\"outputArea\" ref=\"markdownEditorOutput\" class=\"textarea\" readonly></textarea>\n          </div>\n\n        </el-col>\n      </el-row>\n<!-- \n      <code-diff\n          :old-string=\"inputText\"\n          :new-string=\"outputText\"\n          max-height=\"300px\"\n          output-format=\"side-by-side\"\n      /> -->\n    </div>\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport http from \"@/http\";\nimport VueMarkdown from \"vue-markdown\";\nimport EasyMDE from \"easymde\";\nimport \"easymde/dist/easymde.min.css\";\n\n\nexport default {\n  name: \"WritingAssitant\",\n  components:{\n    VueMarkdown,\n    EasyMDE,\n  },\n\n\n  mounted() {\n    fetch('/prompt.json').then(response => response.json()).then(data => {\n          this.prompts = data.prompts;\n        }).catch(error => {\n          console.log(error);\n        });\n\n    this.enableEditMode()\n    this.enableOutputEditMode()\n\n  //  检查是否是登录用户\n\n\n  },\n  data(){\n    return {\n      testData: '',\n      edit:false,\n      p_edit: false,\n\n      markdownContent:'',\n      prompts:null,\n      my_prompts: null,\n      drawer: false,\n      my_drawer: false,\n      direction: 'rtl',\n      selectContent: '',\n      beforeEdit: '',\n      inputText: '',\n      outputText: '',\n      // models:['gpt-3.5-turbo', 'gpt-3.5-turbo-16k', 'gpt-4'],\n      models:['gpt-3.5-turbo', 'gpt-3.5-turbo-16k'],\n      selectedItem: 'gpt-3.5-turbo',\n\n\n      editMode: true,\n      m_outputText: \"\",\n      markdownEditor: null,\n\n      markdownOutputEditor: null,\n\n      loading: false,\n\n    }\n  },\n\n  methods:{\n    jumpyTo(url){\n      if(this.$router.currentRoute.path !== url){\n        this.$router.push(url)\n      }\n    },\n\n    messagePop(type, message){\n      this.$message({\n        message: `${message}`,\n        type: `${type}`\n      });\n    },\n\n    enableEditMode(){\n      // this.editMode = true;\n      const vm = this\n      this.$nextTick(() => {\n        if (!this.markdownEditor) {\n          this.markdownEditor = new EasyMDE({\n            element: this.$refs.markdownEditor,\n          });\n\n          //设计样式\n          // const codemirrorScroll = document.getElementsByClassName('CodeMirror-scroll')[0];\n          const codemirrorScroll = document.getElementsByClassName('CodeMirror-scroll')[0];\n          console.log(\"scoll\")\n          console.log(codemirrorScroll)\n          if (codemirrorScroll) {\n            codemirrorScroll.style.maxHeight = '400px';\n            codemirrorScroll.style.overflowY = 'auto';\n            console.log(\"successfully set\")\n          }\n\n          this.markdownEditor.codemirror.on(\"change\", () => {\n            vm.inputText = vm.markdownEditor.value();\n            console.log(vm.inputText); // 输出当前的输入值\n          });\n        }\n      });\n    },\n\n    enableOutputEditMode(){\n      const vm = this\n      this.$nextTick(() => {\n        if (!this.markdown) {\n          // this.markdownOutputEditor = new EasyMDE({\n          //   element: this.$refs.markdownEditorOutput,\n          // });\n\n          //设计样式\n          const codemirrorScroll = document.getElementsByClassName('CodeMirror-scroll')[1];\n          if (codemirrorScroll) {\n            codemirrorScroll.style.maxHeight = '400px';\n            codemirrorScroll.style.overflowY = 'auto';\n            console.log(\"successfully set\")\n          }\n\n          this.markdownOutputEditor.codemirror.on(\"change\", () => {\n            // vm.outputText = vm.markdownOutputEditor.value();\n            //每次 vue-diff 的值也会跟着变\n            this.$set(this, 'outputText', this.markdownOutputEditor.value());\n            console.log(vm.outputText); // 输出当前的输入值\n          });\n        }\n      });\n    },\n\n\n    copyText(){\n      this.$set(this, 'inputText', this.outputText);\n      // this.inputText = this.outputText\n      // document.getElementById('inputArea').textContent = this.outputText\n      this.markdownEditor.value(this.outputText)\n    },\n    async confirmDelete(content){\n      await http.post('/delete_prompt/',{\n        content: content,\n        person: sessionStorage.getItem('username')\n      }).then(res=>{\n        console.log(\"delete successfully\")\n        this.my_prompts = res.data.prompts\n      }).catch(e=>{\n        console.log(e)\n      })\n    },\n    async savePromptChange(){\n      console.log(\"触发\")\n      this.selectContent = document.getElementById('editPromptBox').textContent\n      document.getElementById('editPromptBox').contentEditable = false\n      this.p_edit = false\n      //  加入到 drawer 自己修改的 prompt 中\n        await this.saveMyPrompt()\n    },\n\n    startEdit(){\n\n      this.edit = true;\n      this.$nextTick(() => {\n        let output = document.getElementById('outputArea');\n        output.textContent = this.outputText;\n      });\n\n    },\n    saveChange(){\n      this.outputText = document.getElementById('outputArea').textContent\n      // document.getElementById('outputArea').blur();\n      document.getElementById('outputArea').contentEditable = false\n      this.edit = false\n\n      this.$message({\n        message: 'successfully save changes',\n        type: 'success'\n      });\n    },\n\n    selectItem(content){\n      this.selectedItem = content\n    },\n    selectContent_(content){\n      this.selectContent = content\n      this.beforeEdit = content\n      this.drawer = false\n    },\n\n    editCurPrompt(){\n      this.p_edit = true;\n      this.$nextTick(() => {\n        let output = document.getElementById('editPromptBox');\n        output.textContent = this.selectContent;\n      });\n    },\n\n    cancelPromptChange(){\n      // this.p_edit = false\n      // document.getElementById('editPromptBox').contentEditable = false\n      this.$nextTick(() => {\n        let output = document.getElementById('editPromptBox');\n        this.p_edit = false\n        document.getElementById('editPromptBox').contentEditable = false\n        output.textContent = this.beforeEdit;\n      });\n    },\n\n    mySelectContent_(content){\n      this.selectContent = content\n      console.log(this.selectContent)\n      this.beforeEdit = content\n      this.my_drawer = false\n    },\n\n    async saveMyPrompt(){\n      http.post('/save_prompt/',{\n        content: this.selectContent,\n        person: sessionStorage.getItem('username')\n      }).then(res=>{\n        console.log(\"save prompt res\", res)\n        if (res.data.success){\n          this.messagePop('success', \"save prompt changes successfully!\")\n          console.log(\"save successfully\")\n        }\n        else {\n          this.messagePop('error', 'fail to save prompt changes')\n        }\n      }).catch(e=>{\n        console.log(e)\n        this.messagePop('error', 'fail to save prompt changes')\n      })\n    },\n\n    async getMyPrompt(){\n      this.my_drawer = true\n      http.post('/get_prompt/',{\n        person: sessionStorage.getItem('username')\n      }).then(res=>{\n        console.log(\"get successfully\")\n        this.my_prompts = res.data.prompts\n      }).catch(e=>{\n        console.log(e)\n      })\n    },\n\n    getWrtingAssistantHelp(){\n      this.loading = true\n      let prompt = `[Paragraph]\\n\n                    ${this.inputText}\\n\n                    [TASK]\\n\n                    ${this.selectContent}\\n\n                    [RESULT]\\n\\n`\n      console.log(\"提交的数据是：\", prompt)\n      http.post('/writing_assistant/',{\n        prompt: prompt,\n        model: this.selectedItem,\n      }).then(res=>{\n        this.loading = false\n        this.outputText = res.data.content\n        this.markdownOutputEditor.value(this.outputText)\n        console.log(\"output Text:\", res.data)\n      }).catch(e=>{\n        console.log(e)\n      })\n    },\n\n    refreshDrawer(){\n      this.drawer = true\n    }\n  },\n}\n</script>\n\n<style scoped>\n\n.container{\n  background: white;\n  width: 90%;\n  height: 1200px;\n  margin: auto;\n}\n.header{\n  margin-left: 4em;\n  /*margin-top: 4em;*/\n  padding-top: 4em;\n  display: flex;\n}\n\n.button{\n  /*width: 100px;*/\n  width: 10%;\n}\n\n\n.drop-item{\n  /*width: 500px;*/\n  font-family: ColfaxAI,helvetica,sans-serif;\n  font-size: small;\n  /*white-space: normal;*/\n  /*word-wrap: break-word;*/\n}\n\n.translate-container {\n  padding: 20px;\n}\n\n.grid-content {\n  height: 550px;\n  border-radius: 4px;\n  margin-bottom: 20px;\n  padding-left: 4em;\n}\n\n\n.bg-light {\n  padding: 20px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n\n.textarea {\n  padding-top: 1em;\n  padding-left: 1em;\n  padding-right: 1em;\n  padding-bottom: 1em;\n  height: 550px;\n\n  /*font-family: 'Arial', sans-serif; !* 这将更改字体 *!*/\n  font-family: 'Roboto', sans-serif;\n  font-size: 16px; /* 这将更改字体大小 */\n  color: #333; /* 这将更改文本颜色 */\n  line-height: 1.5; /* 这将更改行高 */\n  letter-spacing: 0.05em; /* 这将更改字符间距 */\n  text-align: justify; /* 这将使文本两端对齐 */\n  overflow-y: scroll;\n}\n\n\n.el-icon-arrow-down {\n  font-size: 12px;\n}\n\n.el-menu-item i {\n  float: right;\n  margin-top: 5px;\n  cursor: pointer;\n}\n\n\n</style>"],"mappings":";AAwJA;AACA,OAAAA,IAAA;AACA,OAAAC,WAAA;AACA,OAAAC,OAAA;AACA;AAGA;EACAC,IAAA;EACAC,UAAA;IACAH,WAAA;IACAC;EACA;EAGAG,QAAA;IACAC,KAAA,iBAAAC,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IAAAF,IAAA,CAAAG,IAAA;MACA,KAAAC,OAAA,GAAAD,IAAA,CAAAC,OAAA;IACA,GAAAC,KAAA,CAAAC,KAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA;IACA;IAEA,KAAAG,cAAA;IACA,KAAAC,oBAAA;;IAEA;EAGA;;EACAP,KAAA;IACA;MACAQ,QAAA;MACAC,IAAA;MACAC,MAAA;MAEAC,eAAA;MACAV,OAAA;MACAW,UAAA;MACAC,MAAA;MACAC,SAAA;MACAC,SAAA;MACAC,aAAA;MACAC,UAAA;MACAC,SAAA;MACAC,UAAA;MACA;MACAC,MAAA;MACAC,YAAA;MAGAC,QAAA;MACAC,YAAA;MACAC,cAAA;MAEAC,oBAAA;MAEAC,OAAA;IAEA;EACA;EAEAC,OAAA;IACAC,QAAAC,GAAA;MACA,SAAAC,OAAA,CAAAC,YAAA,CAAAC,IAAA,KAAAH,GAAA;QACA,KAAAC,OAAA,CAAAG,IAAA,CAAAJ,GAAA;MACA;IACA;IAEAK,WAAAC,IAAA,EAAAC,OAAA;MACA,KAAAC,QAAA;QACAD,OAAA,KAAAA,OAAA;QACAD,IAAA,KAAAA,IAAA;MACA;IACA;IAEA7B,eAAA;MACA;MACA,MAAAgC,EAAA;MACA,KAAAC,SAAA;QACA,UAAAf,cAAA;UACA,KAAAA,cAAA,OAAAhC,OAAA;YACAgD,OAAA,OAAAC,KAAA,CAAAjB;UACA;;UAEA;UACA;UACA,MAAAkB,gBAAA,GAAAC,QAAA,CAAAC,sBAAA;UACAxC,OAAA,CAAAC,GAAA;UACAD,OAAA,CAAAC,GAAA,CAAAqC,gBAAA;UACA,IAAAA,gBAAA;YACAA,gBAAA,CAAAG,KAAA,CAAAC,SAAA;YACAJ,gBAAA,CAAAG,KAAA,CAAAE,SAAA;YACA3C,OAAA,CAAAC,GAAA;UACA;UAEA,KAAAmB,cAAA,CAAAwB,UAAA,CAAAC,EAAA;YACAX,EAAA,CAAApB,SAAA,GAAAoB,EAAA,CAAAd,cAAA,CAAA0B,KAAA;YACA9C,OAAA,CAAAC,GAAA,CAAAiC,EAAA,CAAApB,SAAA;UACA;QACA;MACA;IACA;;IAEAX,qBAAA;MACA,MAAA+B,EAAA;MACA,KAAAC,SAAA;QACA,UAAAY,QAAA;UACA;UACA;UACA;;UAEA;UACA,MAAAT,gBAAA,GAAAC,QAAA,CAAAC,sBAAA;UACA,IAAAF,gBAAA;YACAA,gBAAA,CAAAG,KAAA,CAAAC,SAAA;YACAJ,gBAAA,CAAAG,KAAA,CAAAE,SAAA;YACA3C,OAAA,CAAAC,GAAA;UACA;UAEA,KAAAoB,oBAAA,CAAAuB,UAAA,CAAAC,EAAA;YACA;YACA;YACA,KAAAG,IAAA,0BAAA3B,oBAAA,CAAAyB,KAAA;YACA9C,OAAA,CAAAC,GAAA,CAAAiC,EAAA,CAAAnB,UAAA;UACA;QACA;MACA;IACA;;IAGAkC,SAAA;MACA,KAAAD,IAAA,yBAAAjC,UAAA;MACA;MACA;MACA,KAAAK,cAAA,CAAA0B,KAAA,MAAA/B,UAAA;IACA;IACA,MAAAmC,cAAAC,OAAA;MACA,MAAAjE,IAAA,CAAAkE,IAAA;QACAD,OAAA,EAAAA,OAAA;QACAE,MAAA,EAAAC,cAAA,CAAAC,OAAA;MACA,GAAA9D,IAAA,CAAA+D,GAAA;QACAxD,OAAA,CAAAC,GAAA;QACA,KAAAO,UAAA,GAAAgD,GAAA,CAAA5D,IAAA,CAAAC,OAAA;MACA,GAAAC,KAAA,CAAA2D,CAAA;QACAzD,OAAA,CAAAC,GAAA,CAAAwD,CAAA;MACA;IACA;IACA,MAAAC,iBAAA;MACA1D,OAAA,CAAAC,GAAA;MACA,KAAAW,aAAA,GAAA2B,QAAA,CAAAoB,cAAA,kBAAAC,WAAA;MACArB,QAAA,CAAAoB,cAAA,kBAAAE,eAAA;MACA,KAAAvD,MAAA;MACA;MACA,WAAAwD,YAAA;IACA;IAEAC,UAAA;MAEA,KAAA1D,IAAA;MACA,KAAA8B,SAAA;QACA,IAAA6B,MAAA,GAAAzB,QAAA,CAAAoB,cAAA;QACAK,MAAA,CAAAJ,WAAA,QAAA7C,UAAA;MACA;IAEA;IACAkD,WAAA;MACA,KAAAlD,UAAA,GAAAwB,QAAA,CAAAoB,cAAA,eAAAC,WAAA;MACA;MACArB,QAAA,CAAAoB,cAAA,eAAAE,eAAA;MACA,KAAAxD,IAAA;MAEA,KAAA4B,QAAA;QACAD,OAAA;QACAD,IAAA;MACA;IACA;IAEAmC,WAAAf,OAAA;MACA,KAAAlC,YAAA,GAAAkC,OAAA;IACA;IACAgB,eAAAhB,OAAA;MACA,KAAAvC,aAAA,GAAAuC,OAAA;MACA,KAAAtC,UAAA,GAAAsC,OAAA;MACA,KAAA1C,MAAA;IACA;IAEA2D,cAAA;MACA,KAAA9D,MAAA;MACA,KAAA6B,SAAA;QACA,IAAA6B,MAAA,GAAAzB,QAAA,CAAAoB,cAAA;QACAK,MAAA,CAAAJ,WAAA,QAAAhD,aAAA;MACA;IACA;IAEAyD,mBAAA;MACA;MACA;MACA,KAAAlC,SAAA;QACA,IAAA6B,MAAA,GAAAzB,QAAA,CAAAoB,cAAA;QACA,KAAArD,MAAA;QACAiC,QAAA,CAAAoB,cAAA,kBAAAE,eAAA;QACAG,MAAA,CAAAJ,WAAA,QAAA/C,UAAA;MACA;IACA;IAEAyD,iBAAAnB,OAAA;MACA,KAAAvC,aAAA,GAAAuC,OAAA;MACAnD,OAAA,CAAAC,GAAA,MAAAW,aAAA;MACA,KAAAC,UAAA,GAAAsC,OAAA;MACA,KAAAzC,SAAA;IACA;IAEA,MAAAoD,aAAA;MACA5E,IAAA,CAAAkE,IAAA;QACAD,OAAA,OAAAvC,aAAA;QACAyC,MAAA,EAAAC,cAAA,CAAAC,OAAA;MACA,GAAA9D,IAAA,CAAA+D,GAAA;QACAxD,OAAA,CAAAC,GAAA,oBAAAuD,GAAA;QACA,IAAAA,GAAA,CAAA5D,IAAA,CAAA2E,OAAA;UACA,KAAAzC,UAAA;UACA9B,OAAA,CAAAC,GAAA;QACA,OACA;UACA,KAAA6B,UAAA;QACA;MACA,GAAAhC,KAAA,CAAA2D,CAAA;QACAzD,OAAA,CAAAC,GAAA,CAAAwD,CAAA;QACA,KAAA3B,UAAA;MACA;IACA;IAEA,MAAA0C,YAAA;MACA,KAAA9D,SAAA;MACAxB,IAAA,CAAAkE,IAAA;QACAC,MAAA,EAAAC,cAAA,CAAAC,OAAA;MACA,GAAA9D,IAAA,CAAA+D,GAAA;QACAxD,OAAA,CAAAC,GAAA;QACA,KAAAO,UAAA,GAAAgD,GAAA,CAAA5D,IAAA,CAAAC,OAAA;MACA,GAAAC,KAAA,CAAA2D,CAAA;QACAzD,OAAA,CAAAC,GAAA,CAAAwD,CAAA;MACA;IACA;IAEAgB,uBAAA;MACA,KAAAnD,OAAA;MACA,IAAAoD,MAAA;AACA,2BAAA5D,SAAA;AACA;AACA,2BAAAF,aAAA;AACA;MACAZ,OAAA,CAAAC,GAAA,YAAAyE,MAAA;MACAxF,IAAA,CAAAkE,IAAA;QACAsB,MAAA,EAAAA,MAAA;QACAC,KAAA,OAAA1D;MACA,GAAAxB,IAAA,CAAA+D,GAAA;QACA,KAAAlC,OAAA;QACA,KAAAP,UAAA,GAAAyC,GAAA,CAAA5D,IAAA,CAAAuD,OAAA;QACA,KAAA9B,oBAAA,CAAAyB,KAAA,MAAA/B,UAAA;QACAf,OAAA,CAAAC,GAAA,iBAAAuD,GAAA,CAAA5D,IAAA;MACA,GAAAE,KAAA,CAAA2D,CAAA;QACAzD,OAAA,CAAAC,GAAA,CAAAwD,CAAA;MACA;IACA;IAEAmB,cAAA;MACA,KAAAnE,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}