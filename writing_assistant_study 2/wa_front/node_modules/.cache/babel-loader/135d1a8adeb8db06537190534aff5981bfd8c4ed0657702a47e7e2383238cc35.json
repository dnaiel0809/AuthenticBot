{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// import http from \"@/http\";\nimport axios from \"axios\";\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\n// import { JWT } from \"google-auth-library\";\nconst {\n  OAuth2Client\n} = require('google-auth-library');\nconst oauthClient = new OAuth2Client({\n  clientId: \"477015876356-b8mop6sg4hnq9spgqemfc87m958scdp0.apps.googleusercontent.com\",\n  clientSecret: \"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\"\n});\nconst {\n  accessToken,\n  refreshToken,\n  expiryDate\n} = await fetchUserGoogleCredsFromDatabase();\noauthClient.credentials.access_token = accessToken;\noauthClient.credentials.refresh_token = refreshToken;\noauthClient.credentials.expiry_date = expiryDate; // Unix epoch milliseconds\n\n// Listen in whenever a new access token is obtained, as you might want to store the new token in your database\n// Note that the refresh_token never changes (unless it's revoked, in which case your end-user will\n// need to go through the full authentication flow again), so storing the new access_token is optional\noauthClient.on('tokens', credentials => {\n  console.log(credentials.access_token);\n  console.log(credentials.scope);\n  console.log(credentials.expiry_date);\n  console.log(credentials.token_type); // will always be 'Bearer'\n});\n\nexport default {\n  name: \"LoginPage\",\n  data() {\n    return {\n      form: {\n        username: \"\",\n        condition: \"\"\n        // password: '',\n      }\n    };\n  },\n\n  methods: {\n    messagePop(type, message) {\n      this.$message({\n        message: `${message}`,\n        type: `${type}`\n      });\n    },\n    jumpyTo(url) {\n      if (this.$router.currentRoute.path !== url) {\n        console.log(this.username);\n        this.$router.push({\n          path: url,\n          query: {\n            Pid: this.username,\n            condition: this.condition\n          }\n        });\n      }\n    },\n    fetchID() {\n      // Get the value of the 'PROLIFIC_PID' parameter from the current URL\n      const urlParams = new URLSearchParams(window.location.search);\n      this.Pid = urlParams.get(\"PROLIFIC_PID\");\n      console.log(\"ID: \", this.Pid);\n\n      // const [hash, query] = url.split('#')[1].split('?')\n      // const params = Object.fromEntries(new URLSearchParams(query))\n      // this.Pid = params.PROLIFIC_PID;\n      // this.Pid = this.$route.query.PROLIFIC_PID;\n      // Update the 'username' variable with the value of 'PROLIFIC_PID'\n\n      this.form.username = this.Pid;\n    },\n    // login() {\n    //   // Handle login logic here\n    //   // console.log(this.form);\n    //   http.post('/login/',{\n    //     name: this.form.username,\n    //     pwd: this.form.password,\n    //   }).then(res => {\n    //     console.log('successfully login')\n    //     console.log(res)\n    //     sessionStorage.setItem('username', this.form.username)\n    //     this.messagePop('success', \"successfully login!!\")\n    //     this.jumpyTo(\"/writing_assistant\")\n    //   //  同时也可以在后端为 single_fileupload 创建一个文件夹\n    //   //  后面还可以再后端为 multiple_fileupload 创建一个文件夹\n\n    //   }).catch(e=>{\n    //     console.log(\"login\", e)\n    //     this.messagePop('error', \"login error, wrong username or password\")\n    //   })\n    // },\n\n    async signUp() {\n      console.log(this.form);\n      console.log(this.form.username);\n      this.username = this.form.username;\n      // await http\n      //   .post(\"/signup/\", {\n      //     name: this.form.username,\n      //     // pwd: this.form.password,\n      //   })\n      //   .then((res) => {\n      //     console.log(\"successfully sign up\");\n      //     console.log(res);\n      //     if (res.data.success) {\n      //       this.messagePop(\"success\", \"successfully sign up\");\n      //       sessionStorage.setItem(\"username\", this.form.username);\n      //       this.condition = res.data.condition;\n      //       this.jumpyTo(\"/pre_survey\");\n      //     } else {\n      //       this.messagePop(\"error\", \"please try another username\");\n      //     }\n      //   })\n      //   .catch((e) => {\n      //     console.log(\"sign up error\", e);\n      //     this.messagePop(\"error\", \"please try another username\");\n      //   });\n      // let vm = this;\n\n      // try {\n      //   const response = await axios.post(\n      //     \"https://sheets.googleapis.com/v4/spreadsheets/1MqxGqjG4HCXFjfSX5e27bFgew3tqpsTXdiaBGoZlRfY/values/user?key=AIzaSyDEJjlz8Jcois3vBb0JquloxlWR2PClDf8\",\n      //     // \"https://sheets.googleapis.com/v4/spreadsheets/1MqxGqjG4HCXFjfSX5e27bFgew3tqpsTXdiaBGoZlRfY/values/users?key=AIzaSyDEJjlz8Jcois3vBb0JquloxlWR2PClDf8\",\n      //     {\n      //       values:[\"New Name\", \"New Email\"],\n      //       // headers: {\n      //       //   Authorization: \"AIzaSyDEJjlz8Jcois3vBb0JquloxlWR2PClDf8\",\n      //       // },\n\n      //       params: {\n      //         valueInputOption: \"RAW\",\n      //         insertDataOption: \"INSERT_ROWS\",\n      //       },\n      //     }\n      //   );\n\n      //   console.error(\"sheet:\", response.data);\n      // } catch (error) {\n      //   console.error(\"Error fetching data:\", error);\n      // }\n\n      const doc = new GoogleSpreadsheet('1MqxGqjG4HCXFjfSX5e27bFgew3tqpsTXdiaBGoZlRfY', oauthClient);\n      await doc.loadInfo(); // loads document properties and worksheets\n      console.log(doc.title);\n      await doc.updateProperties({\n        title: \"renamed doc\"\n      });\n      const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`\n      console.log(sheet.title);\n      console.log(sheet.rowCount);\n\n      // adding / removing sheets\n      const newSheet = await doc.addSheet({\n        title: \"another sheet\"\n      });\n      await newSheet.delete();\n    }\n  },\n  beforeMount() {\n    this.fetchID();\n  }\n};","map":{"version":3,"names":["axios","GoogleSpreadsheet","OAuth2Client","require","oauthClient","clientId","clientSecret","accessToken","refreshToken","expiryDate","fetchUserGoogleCredsFromDatabase","credentials","access_token","refresh_token","expiry_date","on","console","log","scope","token_type","name","data","form","username","condition","methods","messagePop","type","message","$message","jumpyTo","url","$router","currentRoute","path","push","query","Pid","fetchID","urlParams","URLSearchParams","window","location","search","get","signUp","doc","loadInfo","title","updateProperties","sheet","sheetsByIndex","rowCount","newSheet","addSheet","delete","beforeMount"],"sources":["src/components/LoginPage.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <el-card class=\"box-card\">\n      <!-- <div slot=\"header\" class=\"clearfix\"> -->\n      <!--        <span>Login</span>-->\n      <!-- <img src=\"/imgs/ai4sg_logo.png\" alt=\"Logo\" class=\"logo\"> -->\n      <!-- </div> -->\n      <el-form :model=\"form\" label-width=\"120px\">\n        <el-form-item label=\"Prolific ID\">\n          <el-input v-model=\"form.username\"></el-input>\n        </el-form-item>\n        <!-- <el-form-item label=\"Password\">\n          <el-input type=\"password\" v-model=\"form.password\"></el-input>\n        </el-form-item> -->\n        <div class=\"button\">\n          <el-button type=\"primary\" @click=\"signUp\">Login</el-button>\n        </div>\n        <!-- <el-button type=\"primary\" @click=\"signUp\">Sign Up</el-button> -->\n      </el-form>\n    </el-card>\n  </div>\n</template>\n<script src=\"https://apis.google.com/js/platform.js?onload=onLoadCallback\"></script>\n\n<script>\n// import http from \"@/http\";\nimport axios from \"axios\";\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\n// import { JWT } from \"google-auth-library\";\nconst { OAuth2Client } = require('google-auth-library');\nconst oauthClient = new OAuth2Client({\n  clientId: \"477015876356-b8mop6sg4hnq9spgqemfc87m958scdp0.apps.googleusercontent.com\",\n  clientSecret: \"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\",\n});\nconst { accessToken, refreshToken, expiryDate } = await fetchUserGoogleCredsFromDatabase();\noauthClient.credentials.access_token = accessToken;\noauthClient.credentials.refresh_token = refreshToken;\noauthClient.credentials.expiry_date = expiryDate; // Unix epoch milliseconds\n\n// Listen in whenever a new access token is obtained, as you might want to store the new token in your database\n// Note that the refresh_token never changes (unless it's revoked, in which case your end-user will\n// need to go through the full authentication flow again), so storing the new access_token is optional\noauthClient.on('tokens', (credentials) => {\n  console.log(credentials.access_token);\n  console.log(credentials.scope);\n  console.log(credentials.expiry_date);\n  console.log(credentials.token_type); // will always be 'Bearer'\n})\n\n\nexport default {\n  name: \"LoginPage\",\n  data() {\n    return {\n      form: {\n        username: \"\",\n        condition: \"\",\n        // password: '',\n      },\n    };\n  },\n  methods: {\n    messagePop(type, message) {\n      this.$message({\n        message: `${message}`,\n        type: `${type}`,\n      });\n    },\n    jumpyTo(url) {\n      if (this.$router.currentRoute.path !== url) {\n        console.log(this.username);\n        this.$router.push({\n          path: url,\n          query: { Pid: this.username, condition: this.condition },\n        });\n      }\n    },\n    fetchID() {\n      // Get the value of the 'PROLIFIC_PID' parameter from the current URL\n      const urlParams = new URLSearchParams(window.location.search);\n      this.Pid = urlParams.get(\"PROLIFIC_PID\");\n      console.log(\"ID: \", this.Pid);\n\n      // const [hash, query] = url.split('#')[1].split('?')\n      // const params = Object.fromEntries(new URLSearchParams(query))\n      // this.Pid = params.PROLIFIC_PID;\n      // this.Pid = this.$route.query.PROLIFIC_PID;\n      // Update the 'username' variable with the value of 'PROLIFIC_PID'\n\n      this.form.username = this.Pid;\n    },\n    // login() {\n    //   // Handle login logic here\n    //   // console.log(this.form);\n    //   http.post('/login/',{\n    //     name: this.form.username,\n    //     pwd: this.form.password,\n    //   }).then(res => {\n    //     console.log('successfully login')\n    //     console.log(res)\n    //     sessionStorage.setItem('username', this.form.username)\n    //     this.messagePop('success', \"successfully login!!\")\n    //     this.jumpyTo(\"/writing_assistant\")\n    //   //  同时也可以在后端为 single_fileupload 创建一个文件夹\n    //   //  后面还可以再后端为 multiple_fileupload 创建一个文件夹\n\n    //   }).catch(e=>{\n    //     console.log(\"login\", e)\n    //     this.messagePop('error', \"login error, wrong username or password\")\n    //   })\n    // },\n\n    async signUp() {\n      console.log(this.form);\n      console.log(this.form.username);\n      this.username = this.form.username;\n      // await http\n      //   .post(\"/signup/\", {\n      //     name: this.form.username,\n      //     // pwd: this.form.password,\n      //   })\n      //   .then((res) => {\n      //     console.log(\"successfully sign up\");\n      //     console.log(res);\n      //     if (res.data.success) {\n      //       this.messagePop(\"success\", \"successfully sign up\");\n      //       sessionStorage.setItem(\"username\", this.form.username);\n      //       this.condition = res.data.condition;\n      //       this.jumpyTo(\"/pre_survey\");\n      //     } else {\n      //       this.messagePop(\"error\", \"please try another username\");\n      //     }\n      //   })\n      //   .catch((e) => {\n      //     console.log(\"sign up error\", e);\n      //     this.messagePop(\"error\", \"please try another username\");\n      //   });\n      // let vm = this;\n\n      // try {\n      //   const response = await axios.post(\n      //     \"https://sheets.googleapis.com/v4/spreadsheets/1MqxGqjG4HCXFjfSX5e27bFgew3tqpsTXdiaBGoZlRfY/values/user?key=AIzaSyDEJjlz8Jcois3vBb0JquloxlWR2PClDf8\",\n      //     // \"https://sheets.googleapis.com/v4/spreadsheets/1MqxGqjG4HCXFjfSX5e27bFgew3tqpsTXdiaBGoZlRfY/values/users?key=AIzaSyDEJjlz8Jcois3vBb0JquloxlWR2PClDf8\",\n      //     {\n      //       values:[\"New Name\", \"New Email\"],\n      //       // headers: {\n      //       //   Authorization: \"AIzaSyDEJjlz8Jcois3vBb0JquloxlWR2PClDf8\",\n      //       // },\n\n      //       params: {\n      //         valueInputOption: \"RAW\",\n      //         insertDataOption: \"INSERT_ROWS\",\n      //       },\n      //     }\n      //   );\n\n      //   console.error(\"sheet:\", response.data);\n      // } catch (error) {\n      //   console.error(\"Error fetching data:\", error);\n      // }\n\n      const doc = new GoogleSpreadsheet('1MqxGqjG4HCXFjfSX5e27bFgew3tqpsTXdiaBGoZlRfY', oauthClient);\n\n      await doc.loadInfo(); // loads document properties and worksheets\n      console.log(doc.title);\n      await doc.updateProperties({ title: \"renamed doc\" });\n\n      const sheet = doc.sheetsByIndex[0]; // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`\n      console.log(sheet.title);\n      console.log(sheet.rowCount);\n\n      // adding / removing sheets\n      const newSheet = await doc.addSheet({ title: \"another sheet\" });\n      await newSheet.delete();\n    },\n  },\n  beforeMount() {\n    this.fetchID();\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n.box-card {\n  width: 30%;\n}\n\n.logo {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 20%;\n}\n\n.button {\n  display: block;\n  margin-left: auto;\n  /* margin-right: auto; */\n  width: 20%;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}